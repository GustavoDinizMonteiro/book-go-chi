// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"books/app/domain/entity"
	"context"
	"sync"
)

// Ensure, that BookRepositoryMock does implement BookRepository.
// If this is not the case, regenerate this file with moq.
var _ BookRepository = &BookRepositoryMock{}

// BookRepositoryMock is a mock implementation of BookRepository.
//
//	func TestSomethingThatUsesBookRepository(t *testing.T) {
//
//		// make and configure a mocked BookRepository
//		mockedBookRepository := &BookRepositoryMock{
//			CreateBookFunc: func(ctx context.Context, book *entity.Book) (string, error) {
//				panic("mock out the CreateBook method")
//			},
//			ListFunc: func(ctx context.Context) ([]entity.Book, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedBookRepository in code that requires BookRepository
//		// and then make assertions.
//
//	}
type BookRepositoryMock struct {
	// CreateBookFunc mocks the CreateBook method.
	CreateBookFunc func(ctx context.Context, book *entity.Book) (string, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]entity.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateBook holds details about calls to the CreateBook method.
		CreateBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Book is the book argument value.
			Book *entity.Book
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreateBook sync.RWMutex
	lockList       sync.RWMutex
}

// CreateBook calls CreateBookFunc.
func (mock *BookRepositoryMock) CreateBook(ctx context.Context, book *entity.Book) (string, error) {
	if mock.CreateBookFunc == nil {
		panic("BookRepositoryMock.CreateBookFunc: method is nil but BookRepository.CreateBook was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Book *entity.Book
	}{
		Ctx:  ctx,
		Book: book,
	}
	mock.lockCreateBook.Lock()
	mock.calls.CreateBook = append(mock.calls.CreateBook, callInfo)
	mock.lockCreateBook.Unlock()
	return mock.CreateBookFunc(ctx, book)
}

// CreateBookCalls gets all the calls that were made to CreateBook.
// Check the length with:
//
//	len(mockedBookRepository.CreateBookCalls())
func (mock *BookRepositoryMock) CreateBookCalls() []struct {
	Ctx  context.Context
	Book *entity.Book
} {
	var calls []struct {
		Ctx  context.Context
		Book *entity.Book
	}
	mock.lockCreateBook.RLock()
	calls = mock.calls.CreateBook
	mock.lockCreateBook.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *BookRepositoryMock) List(ctx context.Context) ([]entity.Book, error) {
	if mock.ListFunc == nil {
		panic("BookRepositoryMock.ListFunc: method is nil but BookRepository.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedBookRepository.ListCalls())
func (mock *BookRepositoryMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
